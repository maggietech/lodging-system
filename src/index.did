type Payment = record {
  id : text;
  updated_at : opt nat64;
  reservation_id : text;
  amount : text;
  created_date : nat64;
};
type PaymentResponse = record { msg : text; amount : float64 };
type Reservation = record {
  id : text;
  room_id : text;
  check_out_date : nat64;
  check_in_date : nat64;
  created_date : nat64;
  guest_id : text;
};
type ReservationPayload = record {
  room_id : text;
  check_out_date : nat64;
  check_in_date : nat64;
  guest_id : text;
};
type RoomPayload = record { house_id : text; room_number : text; price : text };
type _AzleResult = variant { Ok : vec Payment; Err : text };
type _AzleResult_1 = variant { Ok : vec Reservation; Err : text };
service : () -> {
  addGuest : (text) -> (text);
  addReservation : (ReservationPayload) -> (text);
  addRoom : (RoomPayload) -> (text);
  checkOutAndPay : (text, text) -> (PaymentResponse) query;
  checkRoomAvailability : (text, nat64, nat64) -> (bool) query;
  deleteGuest : (text) -> (text);
  deletePayment : (text) -> (text);
  deleteReservation : (text) -> (text);
  deleteRoom : (text) -> (text);
  getPaymentsByReservation : (text) -> (_AzleResult);
  getReservationsByGuest : (text) -> (_AzleResult_1);
  getReservationsByRoom : (text) -> (_AzleResult_1);
  initHouse : (text) -> (text);
  updateGuest : (text, text) -> (text);
  updatePayment : (text, text) -> (text);
  updateReservation : (text, ReservationPayload) -> (text);
  updateReservationCheckInDate : (text, nat64) -> (text);
  updateReservationCheckOutDate : (text, nat64) -> (text);
  updateRoom : (text, RoomPayload) -> (text);
}